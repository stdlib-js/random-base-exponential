// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-ln@esm/index.mjs";var f=h;var j=function(e,t){return-f(1-e())/t},g=e,c=t,b=n,v=s.isPrimitive,x=r,y=i,w=o,L=m,N=d,E=a.factory,O=l,P=p,T=u,G=j;var R=function(){var e,t,n,s;if(0===arguments.length)n=E();else if(1===arguments.length&&x(arguments[0]))if(w(t=arguments[0],"prng")){if(!y(t.prng))throw new TypeError(T("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",t.prng));n=t.prng}else n=E(t);else{if(!v(e=arguments[0]))throw new TypeError("invalid argument. First argument must be a positive number. Value: `"+e+"`.");if(arguments.length>1){if(!x(t=arguments[1]))throw new TypeError(T("invalid argument. Options argument must be an object. Value: `%s`.",t));if(w(t,"prng")){if(!y(t.prng))throw new TypeError(T("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",t.prng));n=t.prng}else n=E(t)}else n=E()}return g(s=void 0===e?u:p,"NAME","exponential"),t&&t.prng?(g(s,"seed",null),g(s,"seedLength",null),b(s,"state",L(null),N),g(s,"stateLength",null),g(s,"byteLength",null),g(s,"toJSON",L(null)),g(s,"PRNG",n)):(c(s,"seed",r),c(s,"seedLength",i),b(s,"state",d,a),c(s,"stateLength",o),c(s,"byteLength",m),g(s,"toJSON",l),g(s,"PRNG",n),n=n.normalized),s;function r(){return n.seed}function i(){return n.seedLength}function o(){return n.stateLength}function m(){return n.byteLength}function d(){return n.state}function a(e){n.state=e}function l(){var t={type:"PRNG"};return t.name=s.NAME,t.state=P(n.state),t.params=void 0===e?[]:[e],t}function p(){return G(n,e)}function u(e){return O(e)||e<=0?NaN:G(n,e)}},A=R(),J=R;e(A,"factory",J);var M=A;export{M as default,J as factory};
//# sourceMappingURL=index.mjs.map
